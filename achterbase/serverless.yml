service:
  name: cook-it

provider:
  stage: dev
  name: aws
  runtime: nodejs8.10
  profile: cook-it-serverless-admin
  environment:
    RECIPES_TABLE: ${self:service}-recipes-${opt:stage, self:provider.stage}
    RECIPES_IMG_BUCKET: ${self:service}-img-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.RECIPES_TABLE}"
  region: eu-west-2
  timeout: 2
  memorySize: 128

functions:
  getRecipes:
    handler: recipes.get
    events:
      - http:
          method: get
          path: recipes
          cors: true
  updateRecipe:
    handler: updateRecipe.put
    events:
      - http:
          method: put
          path: recipes/{id}
          cors: true
  createRecipe:
    handler: createRecipe.put
    events:
      - http:
          method: put
          path: recipes
          cors: true

resources:
  Resources:
    RecipesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:provider.environment.RECIPES_TABLE}
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    ImagesS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.RECIPES_IMG_BUCKET}
  